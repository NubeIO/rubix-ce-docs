name: Deploy to GitHub Pages

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

env:
  # Hosted GitHub runners have 7 GB of memory available, let's use 6 GB
  NODE_OPTIONS: --max-old-space-size=6144

jobs:
  deploy:
    name: Deploy to GitHub Pages
    environment:
      name: Deploy to GitHub Pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: Determine Version Name
        id: determine_version
        run: |
          if [ -n "${{ github.event.inputs.version_name }}" ]; then
            echo "::set-output name=version_name::${{ github.event.inputs.version_name }}"
          else
            echo "::set-output name=version_name::${{ github.ref_name }}"
          fi
      - name: Publish new version
        run: yarn docusaurus docs:version ${{ steps.determine_version.outputs.version_name }}
      - name: Build
        run: yarn build
      - name: Setup Pages
        uses: actions/configure-pages@v1
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: build
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  generate_pdf:
    name: Generate PDF from Deployed Site
    environment:
      name: Generate PDF from Deployed Site
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Wait for deployment
        run: echo "Deployment finished"
      - name: Install dependencies
        run: yarn install --frozen-lockfile --non-interactive
      - name: Install Prince
        run: |
          curl https://www.princexml.com/download/prince-14.2-linux-generic-x86_64.tar.gz -O
          tar zxf prince-14.2-linux-generic-x86_64.tar.gz
          cd prince-14.2-linux-generic-x86_64
          yes "" | sudo ./install.sh
      - name: Generate PDF
        run: npx docusaurus-prince-pdf -u ${{ steps.deployment.outputs.page_url }}/docs/overview --include-index --output pdf/rubix-ce.pdf
      - name: Upload PDF
        uses: actions/upload-artifact@v3
        with:
          name: pdf
          path: pdf/rubix-ce.pdf
          if-no-files-found: error